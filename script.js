/**
 * C√°c h√†m ƒë·ªÉ x√≥a k√Ω t·ª± d·∫•u nh√°y t·ª´ chu·ªói k√Ω t·ª±
 */

// Ph∆∞∆°ng ph√°p 1: X√≥a t·∫•t c·∫£ d·∫•u nh√°y (c·∫£ ƒë∆°n v√† k√©p, bao g·ªìm t·∫•t c·∫£ Unicode quotes)
function removeAllQuotes(str) {
    // X√≥a t·∫•t c·∫£ lo·∫°i d·∫•u nh√°y: ASCII, Unicode v√† c√°c bi·∫øn th·ªÉ kh√°c
    return str.replace(/[\u0022\u0027\u00AB\u00BB\u2018\u2019\u201A\u201B\u201C\u201D\u201E\u201F\u2039\u203A\u300C\u300D\u300E\u300F\u301D\u301E\u301F\uFF02\uFF07\uFF62\uFF63]/g, '');
}

// Ph∆∞∆°ng ph√°p 2: Ch·ªâ x√≥a d·∫•u nh√°y k√©p (bao g·ªìm t·∫•t c·∫£ Unicode)
function removeDoubleQuotes(str) {
    // X√≥a d·∫•u nh√°y k√©p ASCII v√† t·∫•t c·∫£ Unicode double quotes
    return str.replace(/[\u0022\u00AB\u00BB\u201C\u201D\u201E\u201F\u2039\u203A\u300C\u300D\u300E\u300F\u301D\u301E\u301F\uFF02\uFF62\uFF63]/g, '');
}

// Ph∆∞∆°ng ph√°p 3: Ch·ªâ x√≥a d·∫•u nh√°y ƒë∆°n (bao g·ªìm t·∫•t c·∫£ Unicode)
function removeSingleQuotes(str) {
    // X√≥a d·∫•u nh√°y ƒë∆°n ASCII v√† t·∫•t c·∫£ Unicode single quotes
    return str.replace(/[\u0027\u2018\u2019\u201A\u201B\uFF07]/g, '');
}

// Ph∆∞∆°ng ph√°p 7: X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát (gi·ªØ l·∫°i ch·ªØ c√°i, s·ªë v√† kho·∫£ng tr·∫Øng)
function removeSpecialCharacters(str) {
    // Ch·ªâ gi·ªØ l·∫°i ch·ªØ c√°i (a-z, A-Z), s·ªë (0-9), kho·∫£ng tr·∫Øng v√† m·ªôt s·ªë k√Ω t·ª± c∆° b·∫£n
    return str.replace(/[^\w\s\u00C0-\u024F\u1E00-\u1EFF]/g, '');
}

// Ph∆∞∆°ng ph√°p 8: X√≥a d·∫•u ch·∫•m ·ªü cu·ªëi chu·ªói
function removeTrailingPeriods(str) {
    // X√≥a t·∫•t c·∫£ d·∫•u ch·∫•m ·ªü cu·ªëi chu·ªói (bao g·ªìm nhi·ªÅu d·∫•u ch·∫•m li√™n ti·∫øp)
    return str.replace(/\.+$/, '');
}

// Ph∆∞∆°ng ph√°p 9: X√≥a t·∫•t c·∫£ d·∫•u ch·∫•m
function removeAllPeriods(str) {
    return str.replace(/\./g, '');
}

// Ph∆∞∆°ng ph√°p 10: X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u ch·∫•m cu·ªëi (k·∫øt h·ª£p)
function removeSpecialAndTrailingPeriods(str) {
    return removeTrailingPeriods(removeSpecialCharacters(str));
}

// Ph∆∞∆°ng ph√°p 11: X√≥a t·∫•t c·∫£ (d·∫•u nh√°y + k√Ω t·ª± ƒë·∫∑c bi·ªát + d·∫•u ch·∫•m cu·ªëi)
function removeAll(str) {
    return removeTrailingPeriods(removeSpecialCharacters(removeAllQuotes(str)));
}

// Ph∆∞∆°ng ph√°p 12: D·ªçn d·∫πp ho√†n to√†n (bao g·ªìm trim v√† normalize spaces)
function cleanupText(str) {
    return str
        .replace(/[\u0022\u0027\u00AB\u00BB\u2018\u2019\u201A\u201B\u201C\u201D\u201E\u201F\u2039\u203A\u300C\u300D\u300E\u300F\u301D\u301E\u301F\uFF02\uFF07\uFF62\uFF63]/g, '') // X√≥a d·∫•u nh√°y
        .replace(/[^\w\s\u00C0-\u024F\u1E00-\u1EFF]/g, '') // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
        .replace(/\.+$/, '') // X√≥a d·∫•u ch·∫•m cu·ªëi
        .replace(/\s+/g, ' ') // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
        .trim(); // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
}

// Ph∆∞∆°ng ph√°p 4: X√≥a d·∫•u nh√°y s·ª≠ d·ª•ng split v√† join (bao g·ªìm t·∫•t c·∫£ Unicode)
function removeQuotesWithSplit(str) {
    // List t·∫•t c·∫£ c√°c k√Ω t·ª± d·∫•u nh√°y c·∫ßn x√≥a
    const quotesToRemove = [
        '\u0022', // " - ASCII double quote
        '\u0027', // ' - ASCII single quote
        '\u00AB', // ¬´ - Left-pointing double angle quotation mark
        '\u00BB', // ¬ª - Right-pointing double angle quotation mark
        '\u2018', // ' - Left single quotation mark
        '\u2019', // ' - Right single quotation mark
        '\u201A', // ‚Äö - Single low-9 quotation mark
        '\u201B', // ‚Äõ - Single high-reversed-9 quotation mark
        '\u201C', // " - Left double quotation mark
        '\u201D', // " - Right double quotation mark
        '\u201E', // ‚Äû - Double low-9 quotation mark
        '\u201F', // ‚Äü - Double high-reversed-9 quotation mark
        '\u2039', // ‚Äπ - Single left-pointing angle quotation mark
        '\u203A', // ‚Ä∫ - Single right-pointing angle quotation mark
        '\u300C', // „Äå - Left corner bracket
        '\u300D', // „Äç - Right corner bracket
        '\u300E', // „Äé - Left white corner bracket
        '\u300F', // „Äè - Right white corner bracket
        '\u301D', // „Äù - Reversed double prime quotation mark
        '\u301E', // „Äû - Double prime quotation mark
        '\u301F', // „Äü - Low double prime quotation mark
        '\uFF02', // ÔºÇ - Fullwidth quotation mark
        '\uFF07', // Ôºá - Fullwidth apostrophe
        '\uFF62', // ÔΩ¢ - Halfwidth left corner bracket
        '\uFF63'  // ÔΩ£ - Halfwidth right corner bracket
    ];
    
    let result = str;
    quotesToRemove.forEach(quote => {
        result = result.split(quote).join('');
    });
    return result;
}

// Ph∆∞∆°ng ph√°p 5: S·ª≠ d·ª•ng v√≤ng l·∫∑p ƒë·ªÉ x√≥a k√Ω t·ª± (bao g·ªìm t·∫•t c·∫£ Unicode)
function removeQuotesWithLoop(str) {
    const quotesToRemove = [
        '\u0022', '\u0027', '\u00AB', '\u00BB', '\u2018', '\u2019', '\u201A', '\u201B',
        '\u201C', '\u201D', '\u201E', '\u201F', '\u2039', '\u203A', '\u300C', '\u300D',
        '\u300E', '\u300F', '\u301D', '\u301E', '\u301F', '\uFF02', '\uFF07', '\uFF62', '\uFF63'
    ];
    
    let result = '';
    for (let i = 0; i < str.length; i++) {
        if (!quotesToRemove.includes(str[i])) {
            result += str[i];
        }
    }
    return result;
}

// Ph∆∞∆°ng ph√°p 6: S·ª≠ d·ª•ng filter v√† Array (bao g·ªìm t·∫•t c·∫£ Unicode)
function removeQuotesWithFilter(str) {
    const quotesToRemove = [
        '\u0022', '\u0027', '\u00AB', '\u00BB', '\u2018', '\u2019', '\u201A', '\u201B',
        '\u201C', '\u201D', '\u201E', '\u201F', '\u2039', '\u203A', '\u300C', '\u300D',
        '\u300E', '\u300F', '\u301D', '\u301E', '\u301F', '\uFF02', '\uFF07', '\uFF62', '\uFF63'
    ];
    return str.split('').filter(char => !quotesToRemove.includes(char)).join('');
}

// H√†m hi·ªÉn th·ªã k·∫øt qu·∫£ l√™n giao di·ªán
function displayResult(result) {
    const resultTextarea = document.getElementById('resultText');
    resultTextarea.value = result;
    
    // Th√™m hi·ªáu ·ª©ng highlight
    resultTextarea.style.backgroundColor = '#e6fffa';
    setTimeout(() => {
        resultTextarea.style.backgroundColor = '#ffffff';
    }, 1000);
    
    // Reset n√∫t copy v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    resetCopyButton();
}

// H√†m sao ch√©p k·∫øt qu·∫£ v√†o clipboard
async function copyToClipboard() {
    const resultTextarea = document.getElementById('resultText');
    const copyButton = document.getElementById('copyButton');
    
    if (!resultTextarea.value.trim()) {
        alert('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p!');
        return;
    }
    
    try {
        // S·ª≠ d·ª•ng Clipboard API hi·ªán ƒë·∫°i
        await navigator.clipboard.writeText(resultTextarea.value);
        
        // C·∫≠p nh·∫≠t UI ƒë·ªÉ th√¥ng b√°o ƒë√£ sao ch√©p
        copyButton.innerHTML = '‚úÖ ƒê√£ sao ch√©p';
        copyButton.classList.add('copied');
        
        // Reset sau 2 gi√¢y
        setTimeout(() => {
            resetCopyButton();
        }, 2000);
        
        // Th√™m hi·ªáu ·ª©ng flash cho textarea
        resultTextarea.style.backgroundColor = '#c6f6d5';
        setTimeout(() => {
            resultTextarea.style.backgroundColor = '#ffffff';
        }, 500);
        
    } catch (err) {
        // Fallback cho tr√¨nh duy·ªát c≈©
        try {
            resultTextarea.select();
            resultTextarea.setSelectionRange(0, 99999); // Cho mobile
            document.execCommand('copy');
            
            copyButton.innerHTML = '‚úÖ ƒê√£ sao ch√©p';
            copyButton.classList.add('copied');
            
            setTimeout(() => {
                resetCopyButton();
            }, 2000);
            
        } catch (fallbackErr) {
            alert('Kh√¥ng th·ªÉ sao ch√©p t·ª± ƒë·ªông. Vui l√≤ng sao ch√©p th·ªß c√¥ng!');
            resultTextarea.select();
        }
    }
}

// H√†m reset n√∫t copy v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
function resetCopyButton() {
    const copyButton = document.getElementById('copyButton');
    copyButton.innerHTML = 'üìã Sao ch√©p';
    copyButton.classList.remove('copied');
}

// H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "X√≥a T·∫•t C·∫£ D·∫•u Nh√°y"
function removeQuotesMethod1() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeAllQuotes(inputText);
    displayResult(result);
    
    // Hi·ªÉn th·ªã th√¥ng tin x·ª≠ l√Ω
    console.log('Ph∆∞∆°ng ph√°p 1 - X√≥a t·∫•t c·∫£ d·∫•u nh√°y:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "X√≥a Ch·ªâ D·∫•u Nh√°y K√©p"
function removeQuotesMethod2() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeDoubleQuotes(inputText);
    displayResult(result);
    
    console.log('Ph∆∞∆°ng ph√°p 2 - X√≥a ch·ªâ d·∫•u nh√°y k√©p:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "X√≥a Ch·ªâ D·∫•u Nh√°y ƒê∆°n"
function removeQuotesMethod3() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeSingleQuotes(inputText);
    displayResult(result);
    
    console.log('Ph∆∞∆°ng ph√°p 3 - X√≥a ch·ªâ d·∫•u nh√°y ƒë∆°n:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω x√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
function removeSpecialMethod() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeSpecialCharacters(inputText);
    displayResult(result);
    
    console.log('X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω x√≥a d·∫•u ch·∫•m cu·ªëi
function removeTrailingPeriodsMethod() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeTrailingPeriods(inputText);
    displayResult(result);
    
    console.log('X√≥a d·∫•u ch·∫•m cu·ªëi:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω x√≥a t·∫•t c·∫£ d·∫•u ch·∫•m
function removeAllPeriodsMethod() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = removeAllPeriods(inputText);
    displayResult(result);
    
    console.log('X√≥a t·∫•t c·∫£ d·∫•u ch·∫•m:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x·ª≠ l√Ω d·ªçn d·∫πp ho√†n to√†n
function cleanupMethod() {
    const inputText = document.getElementById('inputText').value;
    if (!inputText.trim()) {
        alert('Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn x·ª≠ l√Ω!');
        return;
    }
    
    const result = cleanupText(inputText);
    displayResult(result);
    
    console.log('D·ªçn d·∫πp ho√†n to√†n:');
    console.log('Input:', inputText);
    console.log('Output:', result);
}

// H√†m x√≥a t·∫•t c·∫£ n·ªôi dung
function clearAll() {
    document.getElementById('inputText').value = '';
    document.getElementById('resultText').value = '';
}

// H√†m demo c√°c ph∆∞∆°ng ph√°p kh√°c nhau (ch·∫°y trong console)
function demoAllMethods() {
    const testString = 'Hello "World" and \'JavaScript\' programming \u201Ctest\u201D with special@#$%^&*()chars... end with dots...';
    
    console.log('=== DEMO C√ÅC PH∆Ø∆†NG PH√ÅP X·ª¨ L√ù CHU·ªñI ===');
    console.log('Chu·ªói g·ªëc:', testString);
    console.log('');
    
    console.log('üî§ LO·∫†I B·ªé D·∫§U NH√ÅY:');
    console.log('1. Regex - X√≥a t·∫•t c·∫£ d·∫•u nh√°y:', removeAllQuotes(testString));
    console.log('2. Regex - Ch·ªâ d·∫•u nh√°y k√©p:', removeDoubleQuotes(testString));
    console.log('3. Regex - Ch·ªâ d·∫•u nh√°y ƒë∆°n:', removeSingleQuotes(testString));
    console.log('');
    
    console.log('üßπ LO·∫†I B·ªé K√ù T·ª∞ ƒê·∫∂C BI·ªÜT:');
    console.log('4. X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát:', removeSpecialCharacters(testString));
    console.log('5. X√≥a d·∫•u ch·∫•m cu·ªëi:', removeTrailingPeriods(testString));
    console.log('6. X√≥a t·∫•t c·∫£ d·∫•u ch·∫•m:', removeAllPeriods(testString));
    console.log('');
    
    console.log('üöÄ K·∫æT H·ª¢P:');
    console.log('7. X√≥a ƒë·∫∑c bi·ªát + d·∫•u ch·∫•m cu·ªëi:', removeSpecialAndTrailingPeriods(testString));
    console.log('8. X√≥a t·∫•t c·∫£:', removeAll(testString));
    console.log('9. D·ªçn d·∫πp ho√†n to√†n:', cleanupText(testString));
    
    // Test ri√™ng v·ªõi Unicode quotes
    const unicodeTest = 'Test \u201CUnicode\u201D quotes \u2018and\u2019 special!@#$%...';
    console.log('\n=== TEST V·ªöI UNICODE V√Ä K√ù T·ª∞ ƒê·∫∂C BI·ªÜT ===');
    console.log('Input:', unicodeTest);
    console.log('Output (cleanup):', cleanupText(unicodeTest));
}

// H√†m debug ƒë·ªÉ xem Unicode codes c·ªßa c√°c k√Ω t·ª± trong chu·ªói
function debugString(str) {
    console.log('=== DEBUG CHU·ªñI K√ù T·ª∞ ===');
    console.log('Chu·ªói:', str);
    console.log('ƒê·ªô d√†i:', str.length);
    console.log('Chi ti·∫øt t·ª´ng k√Ω t·ª±:');
    
    for (let i = 0; i < str.length; i++) {
        const char = str[i];
        const code = char.charCodeAt(0);
        const unicode = 'U+' + code.toString(16).toUpperCase().padStart(4, '0');
        console.log(`${i + 1}. "${char}" - ${unicode} (${code})`);
    }
    
    console.log('\nSau khi x√≥a d·∫•u nh√°y:', removeAllQuotes(str));
}

// H√†m test ƒë·∫∑c bi·ªát cho Unicode quotes
function testUnicodeQuotes() {
    const examples = [
        'Hello \u201CWorld\u201D',           // Unicode double quotes
        'It\u2019s \u2018amazing\u2019',         // Unicode single quotes  
        'Mixed \u201Cquotes\u201D and \u2018types\u2019', // Mixed Unicode
        'Regular "quotes" and \'apostrophe\'', // Regular quotes
        '\u201CStart\u201D and \u2018end\u2019',       // Various combinations
        'When My Wife Got Home I Asked, \u201CDo You Love Him\u201D \u2013 She Froze When I Said His Name' // Test case t·ª´ user
    ];
    
    console.log('=== TEST UNICODE QUOTES ===');
    examples.forEach((text, index) => {
        console.log(`${index + 1}. Input:  ${text}`);
        console.log(`   Output: ${removeAllQuotes(text)}`);
        console.log('');
    });
}

// Th√™m s·ª± ki·ªán Enter ƒë·ªÉ th·ª±c hi·ªán x·ª≠ l√Ω
document.addEventListener('DOMContentLoaded', function() {
    const inputText = document.getElementById('inputText');
    const resultText = document.getElementById('resultText');
    
    inputText.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            cleanupMethod(); // Thay ƒë·ªïi t·ª´ removeQuotesMethod1 th√†nh cleanupMethod
        }
    });
    
    // Th√™m ph√≠m t·∫Øt Ctrl+C cho textarea k·∫øt qu·∫£
    resultText.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.key === 'c') {
            e.preventDefault();
            copyToClipboard();
        }
    });
    
    // Th√™m double-click ƒë·ªÉ sao ch√©p
    resultText.addEventListener('dblclick', function() {
        copyToClipboard();
    });
    
    // Th√™m v√≠ d·ª• m·∫´u
    inputText.placeholder = 'V√≠ d·ª•: Hello "World" and \'JavaScript\' with special@#$% chars...';
    
    console.log('üöÄ ·ª®ng d·ª•ng t·ªëi ∆∞u h√≥a t√™n file ƒë√£ s·∫µn s√†ng!');
    console.log('üí° C√°c l·ªánh console h·ªØu √≠ch:');
    console.log('   - demoAllMethods() - Demo t·∫•t c·∫£ ph∆∞∆°ng ph√°p');
    console.log('   - testUnicodeQuotes() - Test Unicode quotes');
    console.log('   - debugString("your text") - Debug chu·ªói k√Ω t·ª±');
    console.log('üìù T√≠nh nƒÉng sao ch√©p:');
    console.log('   - Nh·∫•n n√∫t "üìã Sao ch√©p"');
    console.log('   - Double-click v√†o k·∫øt qu·∫£');
    console.log('   - Ctrl+C khi focus v√†o k·∫øt qu·∫£');
});

// Xu·∫•t c√°c h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ b√™n ngo√†i
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        // X√≥a d·∫•u nh√°y
        removeAllQuotes,
        removeDoubleQuotes,
        removeSingleQuotes,
        removeQuotesWithSplit,
        removeQuotesWithLoop,
        removeQuotesWithFilter,
        
        // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
        removeSpecialCharacters,
        removeTrailingPeriods,
        removeAllPeriods,
        removeSpecialAndTrailingPeriods,
        removeAll,
        cleanupText,
        
        // UI utilities
        copyToClipboard,
        displayResult,
        
        // Debug
        debugString
    };
}